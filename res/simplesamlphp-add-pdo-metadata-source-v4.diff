Index: config-templates/config.php
===================================================================
--- config-templates/config.php	(revision 3213)
+++ config-templates/config.php	(working copy)
@@ -465,7 +465,18 @@
 	 * - 'file': Path to the XML file with the metadata.
 	 * - 'url': The url to fetch metadata from. THIS IS ONLY FOR DEBUGGING - THERE IS NO CACHING OF THE RESPONSE.
 	 *
+	 * PDO metadata handler:
+	 * - 'type': This is always 'pdo'.
+	 * - 'dsn': This will be the full path to the database, see http://php.net/manual/en/pdo.drivers.php for your DB
+	 * - 'username': The username to use to connect to the database (OPTIONAL, default NULL)
+	 * - 'password': The password to use to connect to the database (OPTIONAL, default NULL)
+	 * - 'usePersistentConnection': Boolean specifying whether or not to use a persistent DB connection (OPTIONAL, default FALSE)
 	 *
+	 * You can use the script in bin/importMetadataPdo.php to import the existing flatfile metadata
+	 * into the PDO database. The tables will be created assuming your configuration is correct in this file.
+	 *
+	 *     $ php bin/importMetadataPdo.php
+	 *
 	 * Examples:
 	 *
 	 * This example defines two flatfile sources. One is the default metadata directory, the other
@@ -482,6 +493,11 @@
 	 *     array('type' => 'xml', 'file' => 'idp.example.org-idpMeta.xml'),
 	 *     ),
 	 *
+	 * This example defines a flatfile source and a PDO source.
+	 * 'metadata.sources' => array(
+	 *     array('type' => 'flatfile'),
+	 *     array('type' => 'pdo', 'dsn' => 'sqlite:/tmp/metadata.sqlite'),
+	 *     ),
 	 *
 	 * Default:
 	 * 'metadata.sources' => array(
Index: lib/SimpleSAML/Metadata/MetaDataStorageSource.php
===================================================================
--- lib/SimpleSAML/Metadata/MetaDataStorageSource.php	(revision 3213)
+++ lib/SimpleSAML/Metadata/MetaDataStorageSource.php	(working copy)
@@ -69,6 +69,8 @@
 				return new SimpleSAML_Metadata_MetaDataStorageHandlerDynamicXML($sourceConfig);
 			case 'serialize':
 				return new SimpleSAML_Metadata_MetaDataStorageHandlerSerialize($sourceConfig);
+			case 'pdo':
+				return new SimpleSAML_Metadata_MetaDataStorageHandlerPdo($sourceConfig);
 			default:
 				throw new Exception('Invalid metadata source type: "' . $type . '".');
 		}
@@ -226,4 +228,4 @@
 	}
 
 }
-?>
\ No newline at end of file
+?>
Index: lib/SimpleSAML/Metadata/MetaDataStorageHandlerPdo.php
===================================================================
--- lib/SimpleSAML/Metadata/MetaDataStorageHandlerPdo.php	(revision 0)
+++ lib/SimpleSAML/Metadata/MetaDataStorageHandlerPdo.php	(revision 0)
@@ -0,0 +1,160 @@
+<?php
+
+class SimpleSAML_Metadata_MetaDataStorageHandlerPdo extends SimpleSAML_Metadata_MetaDataStorageSource {
+
+    private $pdo;
+    
+    /**
+     * All the metadata sets simpleSAMLphp supports
+     */
+    public $supportedSets = array (
+        'adfs-idp-hosted',
+        'adfs-sp-remote',
+        'saml20-idp-hosted',
+        'saml20-idp-remote',
+        'saml20-sp-remote',
+        'shib13-idp-hosted',
+        'shib13-idp-remote',
+        'shib13-sp-hosted',
+        'shib13-sp-remote',
+        'wsfed-idp-remote',
+        'wsfed-sp-hosted'
+    );
+
+    public function __construct($config) {
+        assert('is_array($config)');
+
+        $globalConfig = SimpleSAML_Configuration::getInstance();
+
+        $cfgHelp = SimpleSAML_Configuration::loadFromArray($config, 'pdo metadata source');
+
+        $driverOptions = array();
+        if ($cfgHelp->getBoolean('usePersistentConnection', FALSE)) {
+            $driverOptions = array(PDO::ATTR_PERSISTENT => TRUE);
+        }
+
+        $this->pdo = new PDO($cfgHelp->getString('dsn'), $cfgHelp->getValue('username', NULL), $cfgHelp->getValue('password', NULL), $driverOptions);
+
+        if (0 === strpos($cfgHelp->getString('dsn'), "sqlite:")) {
+            // only for SQlite
+            $this->pdo->exec("PRAGMA foreign_keys = ON");
+        }
+    }
+
+    public function getMetadataSet($set) {
+        if(!in_array($set, $this->supportedSets)) {
+            return array();
+        }
+
+        $returnSet = array();
+
+        $stmt = $this->pdo->prepare("SELECT * FROM `$set`");
+        if (FALSE === $stmt) {
+            // error in query, pretend we found no entries...
+            // FIXME: log error   
+            return array();
+        }
+        $result = $stmt->execute();
+        if (FALSE === $result) {
+            // query failed, pretend we found no entries...
+            // FIXME: log error
+            return array();
+        }
+        $data = $stmt->fetchAll(PDO::FETCH_ASSOC);
+        foreach($data as $d) {
+            $returnSet[$d['entityId']] = json_decode($d['entityData'], TRUE);
+
+            // the 'entityid' key needs to be added to the entry itself...
+        		if (preg_match('/__DYNAMIC(:[0-9]+)?__/', $d['entityId'])) {
+                $returnSet[$d['entityId']]['entityid'] = $this->generateDynamicHostedEntityID($set);
+            } else {
+                $returnSet[$d['entityId']]['entityid'] = $d['entityId'];
+            }
+            
+        }
+        return $returnSet;
+    }
+
+    public function getMetaData($index, $set) {
+        if(!in_array($set, $this->supportedSets)) {
+            return array();
+        }
+
+        $stmt = $this->pdo->prepare("SELECT * FROM `$set` WHERE entityId = :entityId");
+        if (FALSE === $stmt) {
+            // error in query, pretend we did not find the entry...
+            // FIXME: log error   
+            return array();
+        }
+        $stmt->bindValue(":entityId", $index, PDO::PARAM_STR);
+        $result = $stmt->execute();
+        if (FALSE === $result) {
+            // error in query, pretend we did not find the entry...
+            // FIXME: log error
+            return array();
+        }
+        $data = $stmt->fetch(PDO::FETCH_ASSOC);
+        $entry = json_decode($data['entityData'], TRUE);
+
+        // the 'entityid' key needs to be added to the entry itself...
+		if (preg_match('/__DYNAMIC(:[0-9]+)?__/', $index)) {
+			$entry['entityid'] = $this->generateDynamicHostedEntityID($set);
+		} else {
+			$entry['entityid'] = $index;
+		}
+        return $entry;
+    }
+
+	private function generateDynamicHostedEntityID($set) {
+
+		/* Get the configuration. */
+		$baseurl = SimpleSAML_Utilities::getBaseURL();
+
+		if ($set === 'saml20-idp-hosted') {
+			return $baseurl . 'saml2/idp/metadata.php';
+		} elseif($set === 'saml20-sp-hosted') {
+			return $baseurl . 'saml2/sp/metadata.php';			
+		} elseif($set === 'shib13-idp-hosted') {
+			return $baseurl . 'shib13/idp/metadata.php';
+		} elseif($set === 'shib13-sp-hosted') {
+			return $baseurl . 'shib13/sp/metadata.php';
+		} elseif($set === 'wsfed-sp-hosted') {
+			return 'urn:federation:' . SimpleSAML_Utilities::getSelfHost();
+		} elseif($set === 'adfs-idp-hosted') {
+			return 'urn:federation:' . SimpleSAML_Utilities::getSelfHost() . ':idp';
+		} else {
+			throw new Exception('Can not generate dynamic EntityID for metadata of this type: [' . $set . ']');
+		}
+	}
+
+    /**
+     * PDO add entry to the database
+     */
+    public function addEntry($index, $set, $entityData) {
+        if(!in_array($set, $this->supportedSets)) {
+            return array();
+        }
+        $stmt = $this->pdo->prepare("INSERT INTO `$set` ('entityId', 'entityData') VALUES(:entityId, :entityData)");
+        $stmt->bindValue(":entityId", $index, PDO::PARAM_STR);
+        $stmt->bindValue(":entityData", json_encode($entityData), PDO::PARAM_STR);
+        $result = $stmt->execute();
+        if (FALSE === $result) {
+            // error in query
+            // FIXME: log/throw error
+            return FALSE;
+        }
+        return 1 === $stmt->rowCount();
+    }
+
+    public function initDatabase() {
+        foreach ($this->supportedSets as $s) {
+            $this->pdo->exec("
+                CREATE TABLE IF NOT EXISTS `$s` (
+                entityId VARCHAR(255) NOT NULL,
+                entityData TEXT NOT NULL,
+                PRIMARY KEY (entityId))
+            ");
+        }
+    }
+
+}
Index: bin/importMetadataPdo.php
===================================================================
--- bin/importMetadataPdo.php	(revision 0)
+++ bin/importMetadataPdo.php	(revision 0)
@@ -0,0 +1,21 @@
+<?php
+require_once 'lib/_autoload.php';
+require_once 'config/config.php';
+
+foreach ($config['metadata.sources'] as $s) {
+    // we look for 'pdo' type
+    if ("pdo" === $s['type']) {
+        $mdshp = new SimpleSAML_Metadata_MetaDataStorageHandlerPdo($s);
+        $mdshp->initDatabase();
+        foreach (glob("metadata/*.php") as $filename) {
+            $metadata = array();
+            require_once $filename;
+            $set = basename($filename, ".php");
+            echo "importing set '$set'..." . PHP_EOL;
+            foreach ($metadata as $k => $v) {
+                echo "\t$k" . PHP_EOL;
+                $mdshp->addEntry($k, $set, $v);
+            }
+        }
+    }
+}
